import { Client, Match } from 'marklogic';
import { Facet } from './facet';
import { GeoIndex } from '../model/indexes';
import * as semantic from 'speckle';
export interface FacetValue<T> {
    facet: Facet | typeof Facet;
    value: T;
}
export interface SearchOptions {
    resultsPerPage?: number;
    pageNumber?: number;
    content?: boolean;
    highlights?: boolean;
}
export interface GeoValue {
    radius: number;
    long: number;
    lat: number;
    geoIndex: GeoIndex | typeof GeoIndex;
}
export interface SemanticQuery {
    query: semantic.Query;
    ruleSet?: string;
    resultPrefix: string;
}
export interface Query {
    query?: string;
    facetValues?: FacetValue<any>[];
    geoValue?: GeoValue;
    semanticQuery?: SemanticQuery;
}
export interface SearchResult<T> {
    uri: string;
    format: string;
    index?: number;
    path?: string;
    score?: number;
    confidence?: number;
    fitness?: number;
    matches?: Match[];
    contentLength?: string;
    content?: T;
}
export interface SearchResults {
    total: number;
    results: SearchResult<any>[];
}
export declare function search(client: Client, query: Query, options?: SearchOptions): Promise<SearchResults>;
