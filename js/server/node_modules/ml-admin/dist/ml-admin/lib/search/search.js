var marklogic_1 = require('marklogic');
function search(client, query, options) {
    return new Promise(function (resolve, reject) {
        function doQuery(uris) {
            var whereArgs = [];
            var structuredQueries = [];
            if (query.facetValues) {
                structuredQueries = query.facetValues.map(function (facetValue) {
                    var path = facetValue.facet.path ? facetValue.facet.path : facetValue.facet.prototype.path;
                    return marklogic_1.queryBuilder.term(marklogic_1.queryBuilder.pathIndex(path), facetValue.value);
                });
            }
            if (query.geoValue) {
                var path = query.geoValue.geoIndex.path ? query.geoValue.geoIndex.path : query.geoValue.geoIndex.prototype.path;
                structuredQueries.push(marklogic_1.queryBuilder.geospatial(marklogic_1.queryBuilder.geoPath(path), marklogic_1.queryBuilder.circle(query.geoValue.radius, query.geoValue.lat, query.geoValue.long)));
            }
            if (uris && uris.length > 0) {
                structuredQueries.push(marklogic_1.queryBuilder.document(uris));
            }
            if (structuredQueries.length === 1) {
                whereArgs[0] = structuredQueries[0];
            }
            else if (structuredQueries.length > 1) {
                whereArgs[0] = marklogic_1.queryBuilder.and.apply(marklogic_1.queryBuilder, structuredQueries);
            }
            if (query.query) {
                whereArgs.push(marklogic_1.queryBuilder.parsedFrom(query.query));
            }
            var builtQuery = marklogic_1.queryBuilder.where.apply(marklogic_1.queryBuilder, whereArgs);
            var sliceArgs = [];
            if (options.resultsPerPage) {
                sliceArgs = [options.pageNumber || 1, options.resultsPerPage];
            }
            if (options.highlights) {
                sliceArgs.push(marklogic_1.queryBuilder.snippet());
            }
            if (sliceArgs.length > 0) {
                builtQuery = builtQuery.slice.apply(builtQuery, sliceArgs);
            }
            builtQuery = builtQuery.withOptions({
                categories: options.content ? ['content'] : 'none'
            });
            client.documents.query(builtQuery).result(function (results) {
                if (results.length > 0) {
                    var start = 0;
                    var total = 0;
                    var searchResults = [];
                    if (options.highlights) {
                        var queryResult = results[0];
                        start++;
                        total = queryResult.total;
                        queryResult.results.forEach(function (result) {
                            searchResults.push({
                                uri: result.uri,
                                index: result.index,
                                format: result.format,
                                path: result.path,
                                score: result.score,
                                confidence: result.confidence,
                                fitness: result.fitness,
                                matches: result.matches
                            });
                        });
                    }
                    if (options.content) {
                        for (var i = start; i < results.length; i++) {
                            var fetchedDocument = results[i];
                            var result = void 0;
                            if (options.highlights) {
                                result = searchResults[i - 1];
                            }
                            else {
                                result = {
                                    uri: fetchedDocument.uri,
                                    format: fetchedDocument.format
                                };
                                searchResults.push(result);
                            }
                            result.contentLength = fetchedDocument.contentLength;
                            result.content = fetchedDocument.content;
                        }
                    }
                    resolve({
                        total: total || searchResults.length,
                        results: searchResults
                    });
                }
                else {
                    resolve({
                        total: 0, results: []
                    });
                }
            }, function (e) {
                reject(e);
                return e;
            });
        }
        if (query.semanticQuery) {
            client.graphs.sparql('application/sparql-results+json', query.semanticQuery.query.toSparql()).result(function (result) {
                var uris = result.results.bindings.map(function (binding) {
                    var uri = binding[Object.keys(binding)[0]].value;
                    return uri.substring(query.semanticQuery.resultPrefix.length);
                });
                if (query.query || query.facetValues || query.geoValue) {
                    doQuery(uris);
                }
                else {
                    if (options.content) {
                        if (uris.length > 0) {
                            client.documents.query(marklogic_1.queryBuilder.where(marklogic_1.queryBuilder.document(uris))).result(function (results) {
                                var searchResults = [];
                                for (var i = 0; i < results.length; i++) {
                                    var fetchedDocument = results[i];
                                    var result_1 = void 0;
                                    if (options.highlights) {
                                        result_1 = searchResults[i - 1];
                                    }
                                    else {
                                        result_1 = {
                                            uri: fetchedDocument.uri,
                                            format: fetchedDocument.format
                                        };
                                        searchResults.push(result_1);
                                    }
                                    result_1.contentLength = fetchedDocument.contentLength;
                                    result_1.content = fetchedDocument.content;
                                }
                                resolve({
                                    total: searchResults.length,
                                    results: searchResults
                                });
                            });
                        }
                        else {
                            resolve({
                                total: 0,
                                results: []
                            });
                        }
                    }
                    else {
                        resolve({
                            total: uris.length, results: uris.map(function (uri) {
                                return {
                                    uri: uri,
                                    format: 'json'
                                };
                            })
                        });
                    }
                }
            }, function (error) {
                console.log(error);
                reject(error);
                return error;
            });
        }
        else {
            doQuery();
        }
    });
}
exports.search = search;
//# sourceMappingURL=search.js.map