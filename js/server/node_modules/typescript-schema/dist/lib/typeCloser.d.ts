import * as m from './model';
export declare type ClosedTypes = m.Map<[m.Interface | m.Class, m.Map<m.OpenType>][]>;
export declare function closeClassConstructor(classConstructor: m.ClassConstructor, typeArgs: m.OpenType[], parentTypeArgs?: m.Map<m.OpenType>, closedTypes?: ClosedTypes, cls?: m.Class): m.Class;
export declare function processClass(classConstructor: m.ClassConstructor, typeArgs: m.OpenType[], parentTypeArgs: m.Map<m.OpenType>, closedTypes: ClosedTypes, instanceType: m.DecoratedCompositeType<any>, staticType: m.DecoratedCompositeType<any>, clsExtends: m.Class, clsImplements: m.Interface[], decorators: m.Decorator<any>[], cls?: m.Class): m.Class;
export declare function closeInterfaceConstructor(interfaceConstructor: m.InterfaceConstructor, typeArgs: m.OpenType[], parentTypeArgs?: m.Map<m.OpenType>, closedTypes?: ClosedTypes, int?: m.Interface): m.Interface;
