var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var m = require('./model');
var e = require('./equals');
var v = require('./visitor');
var tc = require('./typeCloser');
var tu = require('./typeUtils');
var AbstractFactory = (function () {
    function AbstractFactory(context) {
        this._context = context || {
            typeArgs: {},
            closedTypes: {},
            closedTypeCallbacks: [],
            isStarted: false
        };
    }
    AbstractFactory.prototype.construct = function () {
        if (this._isConstructed) {
            return this._instance;
        }
        else {
            var wasStarted = this._context.isStarted;
            this._context.isStarted = true;
            this._isConstructed = true;
            var v_1 = this._construct();
            if (!wasStarted) {
                this._context.closedTypeCallbacks.forEach(function (cb) {
                    cb();
                });
            }
            return v_1;
        }
    };
    return AbstractFactory;
})();
exports.AbstractFactory = AbstractFactory;
var AbstractExpressionFactory = (function (_super) {
    __extends(AbstractExpressionFactory, _super);
    function AbstractExpressionFactory(kind, equals, context) {
        _super.call(this, context);
        this._instance = {
            expressionKind: kind,
            modelKind: m.ModelKind.EXPRESSION,
            equals: equals
        };
    }
    return AbstractExpressionFactory;
})(AbstractFactory);
exports.AbstractExpressionFactory = AbstractExpressionFactory;
var AbstractTypeFactory = (function (_super) {
    __extends(AbstractTypeFactory, _super);
    function AbstractTypeFactory(kind, equals, context) {
        _super.call(this, context);
        this._instance = {
            typeKind: kind,
            modelKind: m.ModelKind.TYPE,
            equals: equals
        };
    }
    return AbstractTypeFactory;
})(AbstractFactory);
exports.AbstractTypeFactory = AbstractTypeFactory;
var EnumExpressionFactory = (function (_super) {
    __extends(EnumExpressionFactory, _super);
    function EnumExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.ENUM, e.enumExpressionEquals, context);
    }
    EnumExpressionFactory.prototype.setValue = function (value) {
        this.enum(value.enum);
        this.value(value.value);
    };
    EnumExpressionFactory.prototype.value = function (value) {
        this._instance.value = value;
    };
    EnumExpressionFactory.prototype.enum = function (et) {
        var etc = factory(et);
        this._instance.enum = etc;
    };
    EnumExpressionFactory.prototype._construct = function () {
        this._instance.enum = this._instance.enum.construct();
        return this._instance;
    };
    return EnumExpressionFactory;
})(AbstractExpressionFactory);
exports.EnumExpressionFactory = EnumExpressionFactory;
var ComplexExpressionFactory = (function (_super) {
    __extends(ComplexExpressionFactory, _super);
    function ComplexExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.COMPLEX, e.complexExpressionEquals, context);
    }
    ComplexExpressionFactory.prototype.setValue = function (value) {
    };
    ComplexExpressionFactory.prototype._construct = function () {
        return this._instance;
    };
    return ComplexExpressionFactory;
})(AbstractExpressionFactory);
exports.ComplexExpressionFactory = ComplexExpressionFactory;
var ClassExpressionFactory = (function (_super) {
    __extends(ClassExpressionFactory, _super);
    function ClassExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.CLASS, e.classExpressionEquals, context);
    }
    ClassExpressionFactory.prototype.setValue = function (value) {
        this.class(value.class);
    };
    ClassExpressionFactory.prototype.class = function (cc) {
        var ccc = factory(cc);
        this._instance.class = ccc;
        return ccc;
    };
    ClassExpressionFactory.prototype._construct = function () {
        var classConstructor = this._instance.class;
        this._instance.class = classConstructor.construct();
        return this._instance;
    };
    return ClassExpressionFactory;
})(AbstractExpressionFactory);
exports.ClassExpressionFactory = ClassExpressionFactory;
var ObjectExpressionFactory = (function (_super) {
    __extends(ObjectExpressionFactory, _super);
    function ObjectExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.OBJECT, e.objectExpressionEquals, context);
        this._instance.properties = {};
    }
    ObjectExpressionFactory.prototype.setValue = function (value) {
        var self = this;
        Object.keys(value.properties).forEach(function (key) {
            self.property(key, value.properties[key].expressionKind).setValue(value.properties[key]);
        });
    };
    ObjectExpressionFactory.prototype.property = function (key, kind) {
        var ec = expressionFactory(kind, this._context);
        this._instance.properties[key] = ec;
        return ec;
    };
    ObjectExpressionFactory.prototype._construct = function () {
        var self = this;
        Object.keys(this._instance.properties).forEach(function (key) {
            self._instance.properties[key] = self._instance.properties[key].construct();
        });
        return this._instance;
    };
    return ObjectExpressionFactory;
})(AbstractExpressionFactory);
exports.ObjectExpressionFactory = ObjectExpressionFactory;
var ArrayExpressionFactory = (function (_super) {
    __extends(ArrayExpressionFactory, _super);
    function ArrayExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.ARRAY, e.arrayExpressionEquals, context);
        this._instance.elements = [];
    }
    ArrayExpressionFactory.prototype.setValue = function (value) {
        var self = this;
        value.elements.forEach(function (element) {
            self.element(element.expressionKind).setValue(element);
        });
    };
    ArrayExpressionFactory.prototype.element = function (kind) {
        var ec = expressionFactory(kind, this._context);
        this._instance.elements.push(ec);
        return ec;
    };
    ArrayExpressionFactory.prototype._construct = function () {
        this._instance.elements = this._instance.elements.map(function (element) {
            return element.construct();
        });
        return this._instance;
    };
    return ArrayExpressionFactory;
})(AbstractExpressionFactory);
exports.ArrayExpressionFactory = ArrayExpressionFactory;
var StringExpressionFactory = (function (_super) {
    __extends(StringExpressionFactory, _super);
    function StringExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.STRING, e.literalExpressionEquals, context);
    }
    StringExpressionFactory.prototype.setValue = function (value) {
        this._instance.value = value.value;
    };
    StringExpressionFactory.prototype.value = function (value) {
        this._instance.value = value;
    };
    StringExpressionFactory.prototype._construct = function () {
        return this._instance;
    };
    return StringExpressionFactory;
})(AbstractExpressionFactory);
exports.StringExpressionFactory = StringExpressionFactory;
var BooleanExpressionFactory = (function (_super) {
    __extends(BooleanExpressionFactory, _super);
    function BooleanExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.STRING, e.literalExpressionEquals, context);
    }
    BooleanExpressionFactory.prototype.setValue = function (value) {
        this._instance.value = value.value;
    };
    BooleanExpressionFactory.prototype.value = function (value) {
        this._instance.value = value;
    };
    BooleanExpressionFactory.prototype._construct = function () {
        return this._instance;
    };
    return BooleanExpressionFactory;
})(AbstractExpressionFactory);
exports.BooleanExpressionFactory = BooleanExpressionFactory;
var NumberExpressionFactory = (function (_super) {
    __extends(NumberExpressionFactory, _super);
    function NumberExpressionFactory(context) {
        _super.call(this, m.ExpressionKind.STRING, e.literalExpressionEquals, context);
    }
    NumberExpressionFactory.prototype.setValue = function (value) {
        this._instance.value = value.value;
    };
    NumberExpressionFactory.prototype.value = function (value) {
        this._instance.value = value;
    };
    NumberExpressionFactory.prototype._construct = function () {
        return this._instance;
    };
    return NumberExpressionFactory;
})(AbstractExpressionFactory);
exports.NumberExpressionFactory = NumberExpressionFactory;
var DecoratorFactory = (function (_super) {
    __extends(DecoratorFactory, _super);
    function DecoratorFactory(parent, context) {
        _super.call(this, context);
        this._instance = {
            parent: parent,
            modelKind: m.ModelKind.DECORATOR,
            equals: e.decoratorEquals,
            decoratorType: null
        };
    }
    DecoratorFactory.prototype.decoratorType = function (type) {
        var t = factory(type);
        this._instance.decoratorType = t;
    };
    DecoratorFactory.prototype.parameter = function (parameter) {
        var e = factory(parameter);
        if (!this._instance.parameters) {
            this._instance.parameters = [];
        }
        this._instance.parameters.push(e);
    };
    DecoratorFactory.prototype.setValue = function (decorator) {
        this._instance.decoratorType.setValue(decorator.decoratorType);
    };
    DecoratorFactory.prototype._construct = function () {
        var c = this._instance.decoratorType;
        this._instance.decoratorType = c.construct();
        if (this._instance.parameters) {
            this._instance.parameters = this._instance.parameters.map(function (parameter) {
                return parameter.construct();
            });
        }
        return this._instance;
    };
    return DecoratorFactory;
})(AbstractFactory);
exports.DecoratorFactory = DecoratorFactory;
var PrimitiveTypeFactory = (function (_super) {
    __extends(PrimitiveTypeFactory, _super);
    function PrimitiveTypeFactory(primitiveTypeKind, context) {
        _super.call(this, m.TypeKind.PRIMITIVE, e.primitiveTypeEquals, context);
        this._instance.primitiveTypeKind = primitiveTypeKind;
    }
    PrimitiveTypeFactory.prototype.setValue = function (primitiveType) {
    };
    PrimitiveTypeFactory.prototype._construct = function () {
        return this._instance;
    };
    return PrimitiveTypeFactory;
})(AbstractTypeFactory);
exports.PrimitiveTypeFactory = PrimitiveTypeFactory;
var TupleTypeFactory = (function (_super) {
    __extends(TupleTypeFactory, _super);
    function TupleTypeFactory(context) {
        _super.call(this, m.TypeKind.TUPLE, e.tupleTypeEquals, context);
        this._instance.elements = [];
    }
    TupleTypeFactory.prototype.element = function (type) {
        var t = factory(type);
        this._instance.elements.push(t);
    };
    TupleTypeFactory.prototype.setValue = function (tupleType) {
        var self = this;
        tupleType.elements.forEach(function (element) {
            self.element(element);
        });
    };
    TupleTypeFactory.prototype._construct = function () {
        var self = this;
        this._instance.elements.forEach(function (element, i) {
            constructConstructableType(self._instance.elements, i, element, self._context);
        });
        return this._instance;
    };
    return TupleTypeFactory;
})(AbstractTypeFactory);
exports.TupleTypeFactory = TupleTypeFactory;
var UnionTypeFactory = (function (_super) {
    __extends(UnionTypeFactory, _super);
    function UnionTypeFactory(context) {
        _super.call(this, m.TypeKind.TUPLE, e.unionTypeEquals, context);
        this._instance.types = [];
    }
    UnionTypeFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.types.push(t);
    };
    UnionTypeFactory.prototype.setValue = function (unionType) {
        var self = this;
        unionType.types.forEach(function (type) {
            self.type(type);
        });
    };
    UnionTypeFactory.prototype._construct = function () {
        var self = this;
        this._instance.types.forEach(function (type, i) {
            constructConstructableType(self._instance.types, i, type, self._context);
        });
        return this._instance;
    };
    return UnionTypeFactory;
})(AbstractTypeFactory);
exports.UnionTypeFactory = UnionTypeFactory;
var EnumMemberFactory = (function (_super) {
    __extends(EnumMemberFactory, _super);
    function EnumMemberFactory(parent, name, context) {
        _super.call(this, context);
        this._instance = {
            parent: parent,
            name: name,
            modelKind: m.ModelKind.ENUM_MEMBER,
            equals: e.enumMemberEquals
        };
        this.name = name;
    }
    EnumMemberFactory.prototype.setValue = function (enumMember) {
    };
    EnumMemberFactory.prototype._construct = function () {
        return this._instance;
    };
    return EnumMemberFactory;
})(AbstractFactory);
exports.EnumMemberFactory = EnumMemberFactory;
var EnumTypeFactory = (function (_super) {
    __extends(EnumTypeFactory, _super);
    function EnumTypeFactory(parent, name, context) {
        _super.call(this, m.TypeKind.ENUM, e.enumEquals, context);
        this._instance.name = name;
        this._instance.parent = parent;
        this._instance.members = [];
        this.name = name;
    }
    EnumTypeFactory.prototype.member = function (name) {
        var memberConstructor = new EnumMemberFactory(this._instance, name, this._context);
        this._instance.members.push(memberConstructor);
        return memberConstructor;
    };
    EnumTypeFactory.prototype.setValue = function (enumType) {
        var self = this;
        enumType.members.forEach(function (enumMember) {
            self.member(enumMember.name).setValue(enumMember);
        });
    };
    EnumTypeFactory.prototype._construct = function () {
        this._instance.members = this._instance.members.map(function (enumMember) {
            return enumMember.construct();
        });
        return this._instance;
    };
    return EnumTypeFactory;
})(AbstractTypeFactory);
exports.EnumTypeFactory = EnumTypeFactory;
var TypeQueryFactory = (function (_super) {
    __extends(TypeQueryFactory, _super);
    function TypeQueryFactory(context) {
        _super.call(this, m.TypeKind.TYPE_QUERY, e.typeQueryEquals, context);
    }
    TypeQueryFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.type = t;
    };
    TypeQueryFactory.prototype.setValue = function (typeQuery) {
        this.type(typeQuery.type);
    };
    TypeQueryFactory.prototype._construct = function () {
        constructConstructableType(this._instance, 'type', this._instance.type, this._context);
        return this._instance;
    };
    return TypeQueryFactory;
})(AbstractTypeFactory);
exports.TypeQueryFactory = TypeQueryFactory;
var ValueFactory = (function (_super) {
    __extends(ValueFactory, _super);
    function ValueFactory(parent, name, valueKind, context) {
        _super.call(this, context);
        this._instance = {
            name: name,
            parent: parent,
            valueKind: valueKind,
            modelKind: m.ModelKind.VALUE,
            equals: e.valueEquals,
            type: null
        };
        this.name = name;
    }
    ValueFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.type = t;
    };
    ValueFactory.prototype.setValue = function (value) {
        this.type(value.type);
    };
    ValueFactory.prototype._construct = function () {
        constructConstructableType(this._instance, 'type', this._instance.type, this._context);
        return this._instance;
    };
    return ValueFactory;
})(AbstractFactory);
exports.ValueFactory = ValueFactory;
var TypeAliasFactory = (function (_super) {
    __extends(TypeAliasFactory, _super);
    function TypeAliasFactory(parent, name, context) {
        _super.call(this, m.TypeKind.TYPE_ALIAS, e.typeAliasEquals, context);
        this._instance.name = name;
        this._instance.parent = parent;
        this.name = name;
    }
    TypeAliasFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.type = t;
    };
    TypeAliasFactory.prototype.setValue = function (value) {
        this.type(value.type);
    };
    TypeAliasFactory.prototype._construct = function () {
        constructConstructableType(this._instance, 'type', this._instance.type, this._context);
        return this._instance;
    };
    return TypeAliasFactory;
})(AbstractTypeFactory);
exports.TypeAliasFactory = TypeAliasFactory;
var AbstractParameterFactory = (function (_super) {
    __extends(AbstractParameterFactory, _super);
    function AbstractParameterFactory(parent, name, isOptional, context) {
        _super.call(this, context);
        this._instance = {
            modelKind: m.ModelKind.PARAMETER,
            parent: parent,
            name: name,
            equals: e.parameterEquals,
            type: null,
            optional: isOptional
        };
        this.name = name;
    }
    AbstractParameterFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.type = t;
    };
    AbstractParameterFactory.prototype.setValue = function (parameter) {
        this.type(parameter.type);
    };
    AbstractParameterFactory.prototype._construct = function () {
        constructConstructableType(this._instance, 'type', this._instance.type, this._context);
        return this._instance;
    };
    return AbstractParameterFactory;
})(AbstractFactory);
exports.AbstractParameterFactory = AbstractParameterFactory;
var DecoratedParameterFactory = (function (_super) {
    __extends(DecoratedParameterFactory, _super);
    function DecoratedParameterFactory(parent, name, isOptional, context) {
        _super.call(this, parent, name, isOptional, context);
        this._instance.modelKind = m.ModelKind.DECORATED_PARAMETER;
    }
    DecoratedParameterFactory.prototype.decorator = function () {
        return decoratorFactory(this._instance, this._context);
    };
    DecoratedParameterFactory.prototype._construct = function () {
        _super.prototype._construct.call(this);
        constructDecorators(this._instance, this._context);
        return this._instance;
    };
    return DecoratedParameterFactory;
})(AbstractParameterFactory);
exports.DecoratedParameterFactory = DecoratedParameterFactory;
var ParameterFactory = (function (_super) {
    __extends(ParameterFactory, _super);
    function ParameterFactory() {
        _super.apply(this, arguments);
    }
    return ParameterFactory;
})(AbstractParameterFactory);
exports.ParameterFactory = ParameterFactory;
var AbstractFunctionTypeFactory = (function (_super) {
    __extends(AbstractFunctionTypeFactory, _super);
    function AbstractFunctionTypeFactory(equals, isDecorated, context) {
        _super.call(this, m.TypeKind.FUNCTION, equals || e.functionTypeEquals, context);
        this._instance.parameters = [];
        this.isDecorated = isDecorated;
    }
    AbstractFunctionTypeFactory.prototype.typeParameter = function (name) {
        if (!this._instance.typeParameters) {
            this._instance.typeParameters = [];
        }
        var typeParameterConstructor = new TypeParameterFactory(this._instance, name, this._context);
        this._instance.typeParameters.push(typeParameterConstructor);
        return typeParameterConstructor;
    };
    AbstractFunctionTypeFactory.prototype.parameter = function (name, isOptional) {
        var parameterConstructor = this.isDecorated ? new DecoratedParameterFactory(this._instance, name, isOptional, this._context) : new ParameterFactory(this._instance, name, isOptional, this._context);
        this._instance.parameters.push(parameterConstructor);
        return parameterConstructor;
    };
    AbstractFunctionTypeFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.type = t;
    };
    AbstractFunctionTypeFactory.prototype.setValue = function (f) {
        var self = this;
        f.parameters.forEach(function (parameter) {
            self.parameter(parameter.name, parameter.optional).setValue(parameter);
        });
        if (f.typeParameters) {
            f.typeParameters.forEach(function (typeParameter) {
                self.typeParameter(typeParameter.name).setValue(typeParameter);
            });
        }
        if (f.type) {
            self.type(f.type);
        }
    };
    AbstractFunctionTypeFactory.prototype._construct = function () {
        this._instance.parameters = this._instance.parameters.map(function (parameter) {
            return parameter.construct();
        });
        if (this._instance.typeParameters) {
            this._instance.typeParameters = this._instance.typeParameters.map(function (typeParameter) {
                return typeParameter.construct();
            });
        }
        if (this._instance.type) {
            constructConstructableType(this._instance, 'type', this._instance.type, this._context);
        }
        return this._instance;
    };
    return AbstractFunctionTypeFactory;
})(AbstractTypeFactory);
exports.AbstractFunctionTypeFactory = AbstractFunctionTypeFactory;
var DecoratedFunctionTypeFactory = (function (_super) {
    __extends(DecoratedFunctionTypeFactory, _super);
    function DecoratedFunctionTypeFactory(context) {
        _super.call(this, null, true, context);
    }
    return DecoratedFunctionTypeFactory;
})(AbstractFunctionTypeFactory);
exports.DecoratedFunctionTypeFactory = DecoratedFunctionTypeFactory;
var FunctionTypeFactory = (function (_super) {
    __extends(FunctionTypeFactory, _super);
    function FunctionTypeFactory() {
        _super.apply(this, arguments);
    }
    return FunctionTypeFactory;
})(AbstractFunctionTypeFactory);
exports.FunctionTypeFactory = FunctionTypeFactory;
var AbstractMemberFactory = (function (_super) {
    __extends(AbstractMemberFactory, _super);
    function AbstractMemberFactory(parent, name, optional, context) {
        _super.call(this, context);
        this._instance = {
            parent: parent,
            name: name,
            type: null,
            optional: optional,
            modelKind: m.ModelKind.MEMBER,
            equals: e.parameterEquals
        };
        this.name = name;
    }
    AbstractMemberFactory.prototype.type = function (type) {
        var t = factory(type);
        this._instance.type = t;
    };
    AbstractMemberFactory.prototype.setValue = function (member) {
        this.type(member.type);
    };
    AbstractMemberFactory.prototype._construct = function () {
        constructConstructableType(this._instance, 'type', this._instance.type, this._context);
        return this._instance;
    };
    return AbstractMemberFactory;
})(AbstractFactory);
exports.AbstractMemberFactory = AbstractMemberFactory;
var DecoratedMemberFactory = (function (_super) {
    __extends(DecoratedMemberFactory, _super);
    function DecoratedMemberFactory(parent, name, optional, context) {
        _super.call(this, parent, name, optional, context);
        this._instance.modelKind = m.ModelKind.DECORATED_MEMBER;
    }
    DecoratedMemberFactory.prototype.decorator = function () {
        return decoratorFactory(this._instance, this._context);
    };
    DecoratedMemberFactory.prototype._construct = function () {
        _super.prototype._construct.call(this);
        constructDecorators(this._instance, this._context);
        return this._instance;
    };
    return DecoratedMemberFactory;
})(AbstractMemberFactory);
exports.DecoratedMemberFactory = DecoratedMemberFactory;
var MemberFactory = (function (_super) {
    __extends(MemberFactory, _super);
    function MemberFactory() {
        _super.apply(this, arguments);
    }
    return MemberFactory;
})(AbstractMemberFactory);
exports.MemberFactory = MemberFactory;
var IndexFactory = (function (_super) {
    __extends(IndexFactory, _super);
    function IndexFactory(parent, keyType, context) {
        _super.call(this, context);
        this._instance = {
            parent: parent,
            keyType: keyType,
            modelKind: m.ModelKind.INDEX,
            equals: e.indexEquals,
            valueType: null
        };
    }
    IndexFactory.prototype.valueType = function (type) {
        var t = factory(type);
        this._instance.valueType = t;
    };
    IndexFactory.prototype.setValue = function (index) {
        this.valueType(index.valueType);
    };
    IndexFactory.prototype._construct = function () {
        constructConstructableType(this._instance, 'valueType', this._instance.valueType, this._context);
        return this._instance;
    };
    return IndexFactory;
})(AbstractFactory);
exports.IndexFactory = IndexFactory;
var AbstractCompositeTypeFactory = (function (_super) {
    __extends(AbstractCompositeTypeFactory, _super);
    function AbstractCompositeTypeFactory(isDecorated, context) {
        _super.call(this, m.TypeKind.COMPOSITE, e.compositeTypeEquals, context);
        this._instance.members = {};
        this.isDecorated = isDecorated;
    }
    AbstractCompositeTypeFactory.prototype.member = function (name, optional) {
        var memberConstructor = this.isDecorated ? new DecoratedMemberFactory(this._instance, name, optional, this._context) : new MemberFactory(this._instance, name, optional, this._context);
        this._instance.members[name] = memberConstructor;
        return memberConstructor;
    };
    AbstractCompositeTypeFactory.prototype.index = function (keyType) {
        var indexConstructor = new IndexFactory(this._instance, keyType, this._context);
        this._instance.index = indexConstructor;
        return indexConstructor;
    };
    AbstractCompositeTypeFactory.prototype.call = function (call) {
        var c = factory(call);
        if (!this._instance.calls) {
            this._instance.calls = [];
        }
        this._instance.calls.push(c);
    };
    AbstractCompositeTypeFactory.prototype.setValue = function (compositeType) {
        var self = this;
        Object.keys(compositeType.members).forEach(function (key) {
            var member = compositeType.members[key];
            self.member(name, member.optional).setValue(member);
        });
        if (compositeType.index) {
            this.index(compositeType.index.keyType).setValue(compositeType.index);
        }
        if (compositeType.calls) {
            compositeType.calls.forEach(function (call) {
                self.call(call);
            });
        }
    };
    AbstractCompositeTypeFactory.prototype._construct = function () {
        var self = this;
        Object.keys(this._instance.members).forEach(function (key) {
            self._instance.members[key] = self._instance.members[key].construct();
        });
        if (this._instance.index) {
            this._instance.index = this._instance.index.construct();
        }
        if (this._instance.calls) {
            this._instance.calls = this._instance.calls.map(function (call) {
                return call.construct();
            });
        }
        return this._instance;
    };
    return AbstractCompositeTypeFactory;
})(AbstractTypeFactory);
exports.AbstractCompositeTypeFactory = AbstractCompositeTypeFactory;
var DecoratedCompositeTypeFactory = (function (_super) {
    __extends(DecoratedCompositeTypeFactory, _super);
    function DecoratedCompositeTypeFactory(parent, context) {
        _super.call(this, true, context);
        this._instance.parent = parent;
    }
    return DecoratedCompositeTypeFactory;
})(AbstractCompositeTypeFactory);
exports.DecoratedCompositeTypeFactory = DecoratedCompositeTypeFactory;
var ContainedCompositeTypeFactory = (function (_super) {
    __extends(ContainedCompositeTypeFactory, _super);
    function ContainedCompositeTypeFactory(parent, isDecorated, context) {
        _super.call(this, isDecorated, context);
        this._instance.parent = parent;
    }
    return ContainedCompositeTypeFactory;
})(AbstractCompositeTypeFactory);
exports.ContainedCompositeTypeFactory = ContainedCompositeTypeFactory;
var CompositeTypeFactory = (function (_super) {
    __extends(CompositeTypeFactory, _super);
    function CompositeTypeFactory() {
        _super.apply(this, arguments);
    }
    return CompositeTypeFactory;
})(AbstractCompositeTypeFactory);
exports.CompositeTypeFactory = CompositeTypeFactory;
var TypeParameterFactory = (function (_super) {
    __extends(TypeParameterFactory, _super);
    function TypeParameterFactory(parent, name, context) {
        _super.call(this, context);
        this._instance = {
            modelKind: m.ModelKind.TYPE_PARAMETER,
            parent: parent,
            name: name,
            equals: e.typeParameterEquals
        };
        this.name = name;
    }
    TypeParameterFactory.prototype.extends = function (type) {
        var t = factory(type);
        this._instance.extends = t;
    };
    TypeParameterFactory.prototype.setValue = function (value) {
        if (value.extends) {
            this.extends(value.extends);
        }
    };
    TypeParameterFactory.prototype._construct = function () {
        if (this._instance.extends) {
            constructConstructableType(this._instance, 'extends', this._instance.extends, this._context);
        }
        return this._instance;
    };
    return TypeParameterFactory;
})(AbstractFactory);
exports.TypeParameterFactory = TypeParameterFactory;
var ClosableTypeFactory = (function (_super) {
    __extends(ClosableTypeFactory, _super);
    function ClosableTypeFactory() {
        _super.apply(this, arguments);
        this.typeArguments = [];
    }
    ClosableTypeFactory.prototype.parentConstructor = function (c) {
        var icc = factory(c);
        this.typeConstructor = icc;
        return icc;
    };
    ClosableTypeFactory.prototype.setValue = function (value) {
        this.parentConstructor(value.typeConstructor);
        var self = this;
        if (value.typeArguments) {
            value.typeArguments.forEach(function (typeArg) {
                self.typeArgument(typeArg);
            });
        }
    };
    ClosableTypeFactory.prototype.typeArgument = function (type) {
        var t = factory(type);
        this.typeArguments.push(t);
    };
    ClosableTypeFactory.prototype._construct = function () {
        var self = this;
        var f = function () {
            var c = self.typeConstructor.construct();
            var typeArguments;
            if (self.typeArguments.length > 0) {
                typeArguments = [];
                self.typeArguments.forEach(function (typeArg, i) {
                    return constructConstructableType(typeArguments, i, typeArg, self._context);
                });
            }
            self._instance = {};
            if (c.modelKind === m.ModelKind.INTERFACE_CONSTRUCTOR) {
                tc.closeInterfaceConstructor(c, typeArguments, self._context.typeArgs, self._context.closedTypes, self._instance);
            }
            else {
                tc.closeClassConstructor(c, typeArguments, self._context.typeArgs, self._context.closedTypes, self._instance);
            }
            return self._instance;
        };
        this._context.closedTypeCallbacks.push(f);
        return f;
    };
    return ClosableTypeFactory;
})(AbstractFactory);
exports.ClosableTypeFactory = ClosableTypeFactory;
var InterfaceFactory = (function (_super) {
    __extends(InterfaceFactory, _super);
    function InterfaceFactory() {
        _super.apply(this, arguments);
    }
    return InterfaceFactory;
})(ClosableTypeFactory);
exports.InterfaceFactory = InterfaceFactory;
var ClassFactory = (function (_super) {
    __extends(ClassFactory, _super);
    function ClassFactory() {
        _super.apply(this, arguments);
    }
    return ClassFactory;
})(ClosableTypeFactory);
exports.ClassFactory = ClassFactory;
var InterfaceConstructorFactory = (function (_super) {
    __extends(InterfaceConstructorFactory, _super);
    function InterfaceConstructorFactory(parent, name, context) {
        _super.call(this, context);
        this._instance = {
            parent: parent,
            name: name,
            modelKind: m.ModelKind.INTERFACE_CONSTRUCTOR,
            equals: e.interfaceConstructorEquals,
            instanceType: {}
        };
        this.name = name;
    }
    InterfaceConstructorFactory.prototype.instanceType = function () {
        var instanceTypeConstructor = new ContainedCompositeTypeFactory(this._instance, false, this._context);
        this._instance.instanceType = instanceTypeConstructor;
        return instanceTypeConstructor;
    };
    InterfaceConstructorFactory.prototype.typeParameter = function (name) {
        return typeParameterFactory(this._instance, name, this._context);
    };
    InterfaceConstructorFactory.prototype.extend = function (extend) {
        var t = factory(extend);
        if (!this._instance.extends) {
            this._instance.extends = [];
        }
        this._instance.extends.push(t);
    };
    InterfaceConstructorFactory.prototype.setValue = function (ic) {
        var self = this;
        self.instanceType().setValue(ic.instanceType);
        if (ic.typeParameters) {
            ic.typeParameters.forEach(function (typeParameter) {
                self.typeParameter(typeParameter.name).setValue(typeParameter);
            });
        }
        if (ic.extends) {
            ic.extends.forEach(function (extend) {
                self.extend(extend);
            });
        }
    };
    InterfaceConstructorFactory.prototype._construct = function () {
        var self = this;
        this._instance.instanceType = this._instance.instanceType.construct();
        constructTypeParameters(this._instance, this._context);
        if (this._instance.extends) {
            this._instance.extends.forEach(function (extend, i) {
                constructConstructableType(self._instance.extends, i, extend, self._context);
            });
        }
        return this._instance;
    };
    return InterfaceConstructorFactory;
})(AbstractFactory);
exports.InterfaceConstructorFactory = InterfaceConstructorFactory;
var ClassConstructorFactory = (function (_super) {
    __extends(ClassConstructorFactory, _super);
    function ClassConstructorFactory(parent, name, context) {
        _super.call(this, context);
        this._instance = {
            parent: parent,
            name: name,
            instanceType: {},
            staticType: {},
            modelKind: m.ModelKind.CLASS_CONSTRUCTOR,
            equals: e.classConstructorEquals
        };
        this.name = name;
    }
    ClassConstructorFactory.prototype.instanceType = function () {
        var instanceTypeConstructor = new DecoratedCompositeTypeFactory(this._instance, this._context);
        this._instance.instanceType = instanceTypeConstructor;
        return instanceTypeConstructor;
    };
    ClassConstructorFactory.prototype.staticType = function () {
        var instanceTypeConstructor = new DecoratedCompositeTypeFactory(this._instance, this._context);
        this._instance.staticType = instanceTypeConstructor;
        return instanceTypeConstructor;
    };
    ClassConstructorFactory.prototype.typeParameter = function (name) {
        return typeParameterFactory(this._instance, name, this._context);
    };
    ClassConstructorFactory.prototype.extend = function (extend) {
        var t = factory(extend);
        this._instance.extends = extend;
    };
    ClassConstructorFactory.prototype.implement = function (extend) {
        var t = factory(extend);
        if (!this._instance.implements) {
            this._instance.implements = [];
        }
        this._instance.implements.push(t);
    };
    ClassConstructorFactory.prototype.decorator = function () {
        return decoratorFactory(this._instance, this._context);
    };
    ClassConstructorFactory.prototype.setValue = function (cc) {
        var self = this;
        self.instanceType().setValue(cc.instanceType);
        self.staticType().setValue(cc.staticType);
        if (cc.typeParameters) {
            cc.typeParameters.forEach(function (typeParameter) {
                self.typeParameter(typeParameter.name).setValue(typeParameter);
            });
        }
        if (cc.extends) {
            this.extend(cc.extends);
        }
        if (cc.implements) {
            cc.implements.forEach(function (impl) {
                self.implement(impl);
            });
        }
        if (cc.decorators) {
            cc.decorators.forEach(function (decorator) {
                self.decorator().setValue(decorator);
            });
        }
    };
    ClassConstructorFactory.prototype._construct = function () {
        var self = this;
        this._instance.instanceType = this._instance.instanceType.construct();
        this._instance.staticType = this._instance.staticType.construct();
        constructTypeParameters(this._instance, this._context);
        constructDecorators(this._instance, this._context);
        if (this._instance.extends) {
            constructConstructableType(this._instance, 'extends', this._instance.extends, this._context);
        }
        if (this._instance.implements) {
            this._instance.implements.forEach(function (impl, i) {
                constructConstructableType(self._instance.implements, i, impl, self._context);
            });
        }
        return this._instance;
    };
    return ClassConstructorFactory;
})(AbstractFactory);
exports.ClassConstructorFactory = ClassConstructorFactory;
var ROOT = {
    modelKind: m.ModelKind.TYPE_CONTAINER,
    typeContainerKind: m.TypeContainerKind.MODULE,
    name: ''
};
var TYPED_PROPERTY_DESCRIPTOR = {
    modelKind: m.ModelKind.INTERFACE_CONSTRUCTOR,
    name: 'TypedPropertyDescriptor',
    parent: ROOT
};
var AbstractTypeContainerFactory = (function (_super) {
    __extends(AbstractTypeContainerFactory, _super);
    function AbstractTypeContainerFactory(kind, name, context) {
        _super.call(this, context);
        this.unresolvedConstructors = {};
        this.undefinedConstructors = {};
        this._instance = {
            name: name,
            typeContainerKind: kind,
            modelKind: m.ModelKind.TYPE_CONTAINER,
            equals: e.typeContainerEquals,
            classConstructors: {},
            interfaceConstructors: {},
            types: {},
            statics: {},
            namespaces: {}
        };
        this.name = name;
    }
    AbstractTypeContainerFactory.prototype.setValue = function (typeContainer) {
        var self = this;
        v.visitTypeContainer(typeContainer, {
            onClassConstructor: function (cc) {
                self.classConstructor(cc.name).setValue(cc);
            },
            onInterfaceConstructor: function (ic) {
                self.interfaceConstructor(ic.name).setValue(ic);
            },
            onType: function (t) {
                if (t.typeKind === m.TypeKind.TYPE_ALIAS) {
                    self.typeAlias(t.name).setValue(t);
                }
                else {
                    self.enumType(t.name).setValue(t);
                }
            },
            onStatic: function (s) {
                self.static(s.name, s.valueKind).setValue(s);
            },
            onNamespace: function (ns) {
                self.namespace(ns.name).setValue(ns);
            }
        });
    };
    AbstractTypeContainerFactory.prototype.setChild = function (name, c) {
        this.undefinedConstructors[name] = c;
        if (this.unresolvedConstructors[name]) {
            this.unresolvedConstructors[name][0](c);
        }
    };
    AbstractTypeContainerFactory.prototype.getChild = function (name) {
        var c = (this._instance.classConstructors[name] ||
            this._instance.interfaceConstructors[name] ||
            this._instance.types[name] ||
            this._instance.statics[name] ||
            this._instance.namespaces[name] || this.undefinedConstructors[name]);
        if (!c) {
            if (this.unresolvedConstructors[name]) {
                return this.unresolvedConstructors[name][1];
            }
            var self_1 = this;
            var _value;
            var _resolvedConstructor;
            c = {
                setValue: function (value) {
                    _value = value;
                },
                construct: function () {
                    if (!_resolvedConstructor) {
                        throw "Cannot construct child \"" + name + "\" of type container \"" + self_1.name + "\" because it has not been resolved.";
                    }
                    return _resolvedConstructor.construct();
                }
            };
            this.unresolvedConstructors[name] = [function (resolvedConstructor) {
                    _resolvedConstructor = resolvedConstructor;
                    if (_value) {
                        _resolvedConstructor.setValue(_value);
                    }
                }, c];
        }
        return c;
    };
    AbstractTypeContainerFactory.prototype.classConstructor = function (name) {
        var cc = this._instance.classConstructors[name];
        if (cc) {
            return cc;
        }
        else {
            var ccc = new ClassConstructorFactory(this._instance, name, this._context);
            this._instance.classConstructors[name] = ccc;
            if (this.unresolvedConstructors[name]) {
                this.unresolvedConstructors[name][0](ccc);
            }
            return ccc;
        }
    };
    AbstractTypeContainerFactory.prototype.interfaceConstructor = function (name) {
        var ic = this._instance.interfaceConstructors[name];
        if (ic) {
            return ic;
        }
        else {
            var icc = new InterfaceConstructorFactory(this._instance, name, this._context);
            this._instance.interfaceConstructors[name] = icc;
            if (this.unresolvedConstructors[name]) {
                this.unresolvedConstructors[name][0](icc);
            }
            return icc;
        }
    };
    AbstractTypeContainerFactory.prototype.typeAlias = function (name) {
        var ta = this._instance.types[name];
        if (ta) {
            return ta;
        }
        else {
            var tac = new TypeAliasFactory(this._instance, name, this._context);
            this._instance.types[name] = tac;
            if (this.unresolvedConstructors[name]) {
                this.unresolvedConstructors[name][0](tac);
            }
            return tac;
        }
    };
    AbstractTypeContainerFactory.prototype.enumType = function (name) {
        var et = this._instance.types[name];
        if (et) {
            return et;
        }
        else {
            var etc = new EnumTypeFactory(this._instance, name, this._context);
            this._instance.types[name] = etc;
            if (this.unresolvedConstructors[name]) {
                this.unresolvedConstructors[name][0](etc);
            }
            return etc;
        }
    };
    AbstractTypeContainerFactory.prototype.static = function (name, valueKind) {
        if (!Object.prototype.hasOwnProperty(name)) {
            var s = this._instance.statics[name];
            if (s) {
                return s;
            }
            else {
                var sc = new ValueFactory(this._instance, name, valueKind, this._context);
                this._instance.statics[name] = sc;
                if (this.unresolvedConstructors[name]) {
                    this.unresolvedConstructors[name][0](sc);
                }
                return sc;
            }
        }
    };
    AbstractTypeContainerFactory.prototype.namespace = function (name) {
        var ns = this._instance.namespaces[name];
        if (ns) {
            return ns;
        }
        else {
            var nsc = new NamespaceFactory(this._instance, name, this._context);
            this._instance.namespaces[name] = nsc;
            if (this.unresolvedConstructors[name]) {
                this.unresolvedConstructors[name][0](nsc);
            }
            return nsc;
        }
    };
    AbstractTypeContainerFactory.prototype._construct = function () {
        var tc = this._instance;
        v.visitTypeContainer(tc, {
            onClassConstructor: function (cc) {
                tc.classConstructors[cc.name] = cc.construct();
            },
            onInterfaceConstructor: function (ic) {
                tc.interfaceConstructors[ic.name] = ic.construct();
            },
            onType: function (t) {
                tc.types[t.name] = t.construct();
            },
            onStatic: function (s) {
                tc.statics[s.name] = s.construct();
                var type = tc.statics[s.name].type;
                if (type.typeKind === m.TypeKind.FUNCTION) {
                    var f = type;
                    if (f.parameters.length === 1) {
                        var t1 = f.parameters[0].type;
                        if (tu.isFunctionType(t1) && (tu.isFunctionVoid(f) || t1.equals(f.type))) {
                            f.decoratorTypeKind = m.DecoratorTypeKind.CLASS;
                        }
                    }
                    else if (f.parameters.length === 2) {
                        var t2 = f.parameters[1].type;
                        if ((t2.primitiveTypeKind === m.PrimitiveTypeKind.STRING) && tu.isFunctionVoid(f)) {
                            f.decoratorTypeKind = m.DecoratorTypeKind.PROPERTY;
                        }
                    }
                    else if (f.parameters.length === 3) {
                        var t1 = f.parameters[0].type;
                        var t2 = f.parameters[1].type;
                        var t3 = f.parameters[2].type;
                        if ((t2.primitiveTypeKind === m.PrimitiveTypeKind.STRING) && tu.isFunctionVoid(f)) {
                            if (t3.primitiveTypeKind === m.PrimitiveTypeKind.NUMBER && tu.isFunctionType(t1) && tu.isFunctionVoid(f)) {
                                f.decoratorTypeKind = m.DecoratorTypeKind.PARAMETER;
                            }
                            else if (t3.typeKind === m.TypeKind.INTERFACE && t3.typeConstructor.equals(TYPED_PROPERTY_DESCRIPTOR) && f.type && f.type.typeKind === m.TypeKind.INTERFACE && f.type.typeConstructor.equals(TYPED_PROPERTY_DESCRIPTOR)) {
                                f.decoratorTypeKind = m.DecoratorTypeKind.METHOD;
                            }
                        }
                    }
                }
            },
            onNamespace: function (ns) {
                tc.namespaces[ns.name] = ns.construct();
            }
        });
        var self = this;
        Object.keys(this.undefinedConstructors).forEach(function (name) {
            var value = self.undefinedConstructors[name].construct();
            switch (value.modelKind) {
                case m.ModelKind.CLASS_CONSTRUCTOR:
                    self._instance.classConstructors[name] = value;
                case m.ModelKind.INTERFACE_CONSTRUCTOR:
                    self._instance.interfaceConstructors[name] = value;
                case m.ModelKind.TYPE:
                    self._instance.types[name] = value;
                case m.ModelKind.TYPE_CONTAINER:
                    self._instance.namespaces[name] = value;
                case m.ModelKind.VALUE:
                    self._instance.statics[name] = value;
            }
        });
        return this._instance;
    };
    return AbstractTypeContainerFactory;
})(AbstractFactory);
exports.AbstractTypeContainerFactory = AbstractTypeContainerFactory;
var ModuleFactory = (function (_super) {
    __extends(ModuleFactory, _super);
    function ModuleFactory(name, context) {
        _super.call(this, m.TypeContainerKind.MODULE, name, context);
    }
    return ModuleFactory;
})(AbstractTypeContainerFactory);
exports.ModuleFactory = ModuleFactory;
var NamespaceFactory = (function (_super) {
    __extends(NamespaceFactory, _super);
    function NamespaceFactory(parent, name, context) {
        _super.call(this, m.TypeContainerKind.NAMESPACE, name, context);
        this._instance.parent = parent;
    }
    return NamespaceFactory;
})(AbstractTypeContainerFactory);
exports.NamespaceFactory = NamespaceFactory;
function expressionFactory(kind, context) {
    switch (kind) {
        case m.ExpressionKind.STRING:
            return new StringExpressionFactory(context);
        case m.ExpressionKind.BOOLEAN:
            return new BooleanExpressionFactory(context);
        case m.ExpressionKind.NUMBER:
            return new NumberExpressionFactory(context);
        case m.ExpressionKind.CLASS:
            return new ClassExpressionFactory(context);
        case m.ExpressionKind.OBJECT:
            return new ObjectExpressionFactory(context);
        case m.ExpressionKind.ARRAY:
            return new ArrayExpressionFactory(context);
        case m.ExpressionKind.COMPLEX:
            return new ComplexExpressionFactory(context);
        case m.ExpressionKind.ENUM:
            return new EnumExpressionFactory(context);
    }
}
exports.expressionFactory = expressionFactory;
function factory(type) {
    if (type.then) {
        var _type;
        var promise = type;
        promise.then(function (type) {
            _type = type;
        });
        return {
            setValue: function (type) {
                _type = type;
            },
            construct: function () {
                return _type;
            }
        };
    }
    else if (type.construct) {
        return type;
    }
    else {
        var _type = type;
        return {
            setValue: function (type) {
                _type = type;
            },
            construct: function () {
                return _type;
            }
        };
    }
}
exports.factory = factory;
function decoratorFactory(instance, context) {
    if (!instance.decorators) {
        instance.decorators = [];
    }
    var decoratorConstructor = new DecoratorFactory(instance, context);
    instance.decorators.push(decoratorConstructor);
    return decoratorConstructor;
}
function constructDecorators(instance, context) {
    if (instance.decorators) {
        instance.decorators = instance.decorators.map(function (decorator) {
            return decorator.construct();
        });
    }
}
function constructConstructableType(parent, index, c, context) {
    var value = c.construct();
    var completed = false;
    switch (value.modelKind) {
        case m.ModelKind.INTERFACE_CONSTRUCTOR:
            var iccb = function () {
                if (!completed) {
                    completed = true;
                    var typeArgs = value.typeParameters ? value.typeParameters.map(function () {
                        return new PrimitiveTypeFactory(m.PrimitiveTypeKind.ANY).construct();
                    }) : [];
                    parent[index] = tc.closeInterfaceConstructor(value, typeArgs, context.typeArgs, context.closedTypes);
                }
                return parent[index];
            };
            parent[index] = iccb;
            context.closedTypeCallbacks.push(iccb);
        case m.ModelKind.CLASS_CONSTRUCTOR:
            var cccb = function () {
                if (!completed) {
                    completed = true;
                    var typeArgs = value.typeParameters ? value.typeParameters.map(function () {
                        return new PrimitiveTypeFactory(m.PrimitiveTypeKind.ANY).construct();
                    }) : [];
                    parent[index] = tc.closeClassConstructor(value, typeArgs, context ? context.typeArgs : null, context ? context.closedTypes : null);
                }
                return parent[index];
            };
            parent[index] = cccb;
            context.closedTypeCallbacks.push(cccb);
        default:
            parent[index] = value;
    }
}
function typeParameterFactory(instance, name, context) {
    if (!instance.typeParameters) {
        instance.typeParameters = [];
    }
    var typeParameterConstructor = new TypeParameterFactory(instance, name, context);
    instance.typeParameters.push(typeParameterConstructor);
    return typeParameterConstructor;
}
function constructTypeParameters(instance, context) {
    if (instance.typeParameters) {
        instance.typeParameters = instance.typeParameters.map(function (typeParameter) {
            return typeParameter.construct();
        });
    }
}
//# sourceMappingURL=factories.js.map